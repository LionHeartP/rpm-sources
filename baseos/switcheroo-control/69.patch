From fd60ef83867d5f7a3a7ad484eae4851ac93b7885 Mon Sep 17 00:00:00 2001
From: Jan200101 <sentrycraft123@gmail.com>
Date: Mon, 14 Aug 2023 14:06:45 +0200
Subject: [PATCH 1/9] main: update GPUs comment for dbus property

---
 src/net.hadess.SwitcherooControl.xml | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/src/net.hadess.SwitcherooControl.xml b/src/net.hadess.SwitcherooControl.xml
index e52bc1a..59a8896 100644
--- a/src/net.hadess.SwitcherooControl.xml
+++ b/src/net.hadess.SwitcherooControl.xml
@@ -38,7 +38,8 @@
         will contain a user-facing name for the GPU, the "Environment" (as) key will
         contain an array of even number of strings, each being an environment
         variable to set to use the GPU, followed by its value, the "Default" (b) key
-        will tag the default (usually integrated) GPU.
+        will tag the default GPU, the "Discrete" (b) key tags if the GPU is a
+        dedicated component.
     -->
     <property name="GPUs" type="aa{sv}" access="read"/>
 
-- 
GitLab


diff --git a/data/30-discrete-gpu.rules.in b/data/30-discrete-gpu.rules.in
new file mode 100644
index 0000000..a803ed4
--- /dev/null
+++ b/data/30-discrete-gpu.rules.in
@@ -0,0 +1,3 @@
+DRIVERS=="amdgpu", SUBSYSTEM=="drm", PROGRAM="@libexecdir@/check-discrete-amdgpu $env{DEVNAME}", TAG+="switcheroo-discrete-gpu"
+DRIVERS=="nouveau", SUBSYSTEM=="drm", PROGRAM="@libexecdir@/check-discrete-nouveau $env{DEVNAME}", TAG+="switcheroo-discrete-gpu"
+DRIVERS=="nvidia", TAG+="switcheroo-discrete-gpu"
diff --git a/data/meson.build b/data/meson.build
index 85e5c93..38cf96c 100644
--- a/data/meson.build
+++ b/data/meson.build
@@ -17,3 +17,10 @@ install_data(
   '30-pci-intel-gpu.hwdb',
   install_dir: hwdb_dir,
 )
+
+configure_file(
+  input: '30-discrete-gpu.rules.in',
+  output: '30-discrete-gpu.rules',
+  configuration: data_conf,
+  install_dir: rules_dir,
+)
diff --git a/meson.build b/meson.build
index b8f4bff..b3aaf0c 100644
--- a/meson.build
+++ b/meson.build
@@ -20,6 +20,9 @@ gnome = import('gnome')
 glib = dependency('glib-2.0', version: '>= 2.56.0')
 gio = dependency('gio-2.0', version: '>= 2.56.0')
 gudev = dependency('gudev-1.0', version: '>= 232')
+libdrm = dependency('libdrm', version: '>= 2.4.97', required: get_option('libdrm'))
+libdrm_nouveau = dependency('libdrm_nouveau', version: '>= 2.4.97', required: get_option('libdrm_nouveau'))
+libdrm_amdgpu = dependency('libdrm_amdgpu', version: '>= 2.4.97', required: get_option('libdrm_amdgpu'))
 
 systemd_systemunitdir = get_option('systemdsystemunitdir')
 if systemd_systemunitdir == ''
@@ -32,6 +35,12 @@ if hwdb_dir == ''
   hwdb_dir = udevdir / 'hwdb.d'
 endif
 
+rules_dir = get_option('rulesdir')
+if rules_dir == ''
+  udevdir = dependency('udev').get_pkgconfig_variable('udevdir')
+  rules_dir = udevdir / 'rules.d'
+endif
+
 # Make like license available in the build root for docs
 configure_file(
   input: 'COPYING',
diff --git a/meson_options.txt b/meson_options.txt
index c8d9619..b8d671a 100644
--- a/meson_options.txt
+++ b/meson_options.txt
@@ -10,6 +10,12 @@ option('hwdbdir',
   description: 'Directory for hwdb files',
 )
 
+option('rulesdir',
+  type: 'string',
+  value: '',
+  description: 'Directory for ruke files',
+)
+
 option('gtk_doc',
   type: 'boolean',
   value: false,
@@ -21,3 +27,21 @@ option('tests',
   type: 'boolean',
   value: false
 )
+
+option('libdrm',
+  description: 'Whether libdrm should be used to probe GPUs',
+  type: 'feature',
+  value: 'auto'
+)
+
+option('libdrm_nouveau',
+  description: 'Whether libdrm_nouveau should be used to probe Nvidia GPUs',
+  type: 'feature',
+  value: 'auto'
+)
+
+option('libdrm_amdgpu',
+  description: 'Whether libdrm_amdgpu should be used to probe AMD GPUs',
+  type: 'feature',
+  value: 'auto'
+)
diff --git a/src/discrete-detection/amdgpu.c b/src/discrete-detection/amdgpu.c
new file mode 100644
index 0000000..2d9804f
--- /dev/null
+++ b/src/discrete-detection/amdgpu.c
@@ -0,0 +1,46 @@
+
+#include <fcntl.h>
+#include <stdlib.h>
+#include <stdio.h>
+#include <gio/gio.h>
+#include <gudev/gudev.h>
+
+#include <amdgpu.h>
+#include <amdgpu_drm.h>
+
+typedef int handle;
+G_DEFINE_AUTO_CLEANUP_FREE_FUNC(handle, close, -1)
+G_DEFINE_AUTOPTR_CLEANUP_FUNC(amdgpu_device_handle, free);
+
+int main(int argc, char** argv)
+{
+	if (argc < 2)
+	{
+		puts ("check-discrete-amdgpu [DEVNAME]");
+		return EXIT_FAILURE;
+	}
+
+	const char *devname;
+	g_auto(handle) fd = -1;
+	g_autoptr(GUdevDevice) parent = NULL;
+	struct drm_amdgpu_info_device device_info = {0};
+	amdgpu_device_handle device = NULL;
+	uint32_t drm_major, drm_minor;
+
+	devname = argv[1];
+	fd = open (devname, O_RDWR);
+	if (fd < 0)
+		return EXIT_FAILURE;
+
+	if (amdgpu_device_initialize (fd, &drm_major, &drm_minor, &device))
+		return EXIT_FAILURE;
+
+	if (amdgpu_query_info (device, AMDGPU_INFO_DEV_INFO, sizeof(device_info), &device_info))
+		return EXIT_FAILURE;
+
+	/* AMDGPU_IDS_FLAGS_FUSION is set for all APUs */
+	if (device_info.ids_flags & AMDGPU_IDS_FLAGS_FUSION)
+		return EXIT_FAILURE;
+
+	return EXIT_SUCCESS;
+}
diff --git a/src/discrete-detection/meson.build b/src/discrete-detection/meson.build
new file mode 100644
index 0000000..3a6c03f
--- /dev/null
+++ b/src/discrete-detection/meson.build
@@ -0,0 +1,18 @@
+
+if libdrm_amdgpu.found()
+  executable('check-discrete-amdgpu',
+    files('amdgpu.c'),
+    dependencies: deps,
+    install: true,
+    install_dir: libexecdir,
+  )
+endif
+
+if libdrm.found() and libdrm_nouveau.found()
+  executable('check-discrete-nouveau',
+    files('nouveau.c'),
+    dependencies: deps,
+    install: true,
+    install_dir: libexecdir,
+  )
+endif
diff --git a/src/discrete-detection/nouveau.c b/src/discrete-detection/nouveau.c
new file mode 100644
index 0000000..0a1f220
--- /dev/null
+++ b/src/discrete-detection/nouveau.c
@@ -0,0 +1,105 @@
+
+#include <fcntl.h>
+#include <stdlib.h>
+#include <stdio.h>
+#include <gio/gio.h>
+#include <gudev/gudev.h>
+
+#include <xf86drm.h>
+#include <nouveau_drm.h>
+#include <nouveau/nvif/ioctl.h>
+#include <nvif/cl0080.h>
+#include <nvif/class.h>
+
+typedef int handle;
+G_DEFINE_AUTO_CLEANUP_FREE_FUNC(handle, close, -1)
+
+int main(int argc, char** argv)
+{
+	if (argc < 2)
+	{
+		puts ("check-discrete-nouveau [DEVNAME]");
+		return EXIT_FAILURE;
+	}
+
+	const char *devname;
+	g_auto(handle) fd = -1;
+
+	devname = argv[1];
+	fd = open (devname, O_RDWR);
+	if (fd < 0)
+		return EXIT_FAILURE;
+
+	g_autofree void *device = malloc(352);
+
+	/* Init device */
+	{	
+		struct {
+			struct nvif_ioctl_v0 ioctl;
+			struct nvif_ioctl_new_v0 new;
+			struct nv_device_v0 dev;
+		} init_args = {
+		  .ioctl = {
+			 .object = 0,
+			 .owner = NVIF_IOCTL_V0_OWNER_ANY,
+			 .route = 0x00,
+			 .type = NVIF_IOCTL_V0_NEW,
+			 .version = 0,
+		  },
+		  .new = {
+			 .handle = 0,
+			 .object = (uintptr_t)device,
+			 .oclass = NV_DEVICE,
+			 .route = NVIF_IOCTL_V0_ROUTE_NVIF,
+			 .token = (uintptr_t)device,
+			 .version = 0,
+		  },
+		  .dev = {
+			 .device = ~0ULL,
+		  },
+	   };
+
+		if (drmCommandWrite (fd, DRM_NOUVEAU_NVIF, &init_args, sizeof(init_args)))
+			return EXIT_FAILURE;
+	}
+
+	/* Query device info */
+	struct {
+		struct nvif_ioctl_v0 ioctl;
+		struct nvif_ioctl_mthd_v0 mthd;
+		struct nv_device_info_v0 info;
+	} args = {
+		.ioctl = {
+			.object = (uintptr_t)device,
+			.owner = NVIF_IOCTL_V0_OWNER_ANY,
+			.route = 0x00,
+			.type = NVIF_IOCTL_V0_MTHD,
+			.version = 0,
+		},
+		.mthd = {
+			.method = NV_DEVICE_V0_INFO,
+			.version = 0,
+		},
+		.info = {
+			.version = 0,
+		},
+	};
+
+	if (drmCommandWriteRead (fd, DRM_NOUVEAU_NVIF, &args, sizeof(args)))
+		return EXIT_FAILURE;
+
+
+	switch (args.info.platform)
+	{
+		case NV_DEVICE_INFO_V0_IGP:
+		case NV_DEVICE_INFO_V0_SOC:
+			return EXIT_FAILURE;
+
+		case NV_DEVICE_INFO_V0_PCI:
+		case NV_DEVICE_INFO_V0_AGP:
+		case NV_DEVICE_INFO_V0_PCIE:
+		default:
+			return EXIT_SUCCESS;
+	}
+	return EXIT_FAILURE;
+}
diff --git a/src/meson.build b/src/meson.build
index ab3a77d..da4267f 100644
--- a/src/meson.build
+++ b/src/meson.build
@@ -1,4 +1,4 @@
-deps = [glib, gio, gudev]
+deps = [glib, gio, gudev, libdrm, libdrm_nouveau, libdrm_amdgpu]
 
 sources = [
   'info-cleanup.c',
@@ -34,3 +34,5 @@ configure_file(
   configuration: switcherooctl_conf,
   install_dir: get_option('bindir')
 )
+
+subdir('discrete-detection')
diff --git a/src/switcheroo-control.c b/src/switcheroo-control.c
index 591b4b7..39d1cf6 100644
--- a/src/switcheroo-control.c
+++ b/src/switcheroo-control.c
@@ -31,6 +31,7 @@ typedef struct {
 	char *name;
 	GPtrArray *env;
 	gboolean is_default;
+	gboolean is_discrete;
 } CardData;
 
 typedef struct {
@@ -94,6 +95,8 @@ build_gpus_variant (ControlData *data)
 				       g_variant_new_strv ((const gchar * const *) card->env->pdata, card->env->len));
 		g_variant_builder_add (&asv_builder, "{sv}", "Default",
 				       g_variant_new_boolean (card->is_default));
+		g_variant_builder_add (&asv_builder, "{sv}", "Discrete",
+				       g_variant_new_boolean (card->is_discrete));
 
 		g_variant_builder_add (&builder, "a{sv}", &asv_builder);
 	}
@@ -340,6 +343,18 @@ get_card_is_default (GUdevDevice *d)
 	return g_udev_device_get_sysfs_attr_as_boolean (parent, "boot_vga");
 }
 
+static gboolean
+get_card_is_discrete (GUdevDevice *d)
+{
+	const char * const * tags;
+	g_autoptr (GUdevDevice) platform_device = NULL;
+
+	tags = g_udev_device_get_tags (d);
+	if (tags && g_strv_contains (tags, "switcheroo-discrete-gpu"))
+		return TRUE;
+	return FALSE;
+}
+
 static CardData *
 get_card_data (GUdevClient *client,
 	       GUdevDevice *d)
@@ -356,6 +371,7 @@ get_card_data (GUdevClient *client,
 	data->name = get_card_name (d);
 	data->env = env;
 	data->is_default = get_card_is_default (d);
+	data->is_discrete = get_card_is_discrete (d);
 
 	return data;
 }
-- 
GitLab


From 79d1769c7f9d1310d80b8f545c23c9a5d1c0a4c7 Mon Sep 17 00:00:00 2001
From: Jan200101 <sentrycraft123@gmail.com>
Date: Tue, 12 Sep 2023 15:53:40 +0200
Subject: [PATCH 3/9] tests: fix integration tests without UMockdev
 `gi.require_version` throws ValueError if the dependency cannot be found

---
 tests/integration-test.py | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/tests/integration-test.py b/tests/integration-test.py
index 997e1d5..c23d928 100755
--- a/tests/integration-test.py
+++ b/tests/integration-test.py
@@ -38,7 +38,7 @@ except ImportError as e:
 try:
     gi.require_version('UMockdev', '1.0')
     from gi.repository import UMockdev
-except ImportError:
+except (ImportError, ValueError):
     sys.stderr.write('Skipping tests, umockdev not available (https://github.com/martinpitt/umockdev)\n')
     sys.exit(0)
 
-- 
GitLab


From ee544e7bc17c5ed084073ef5d7d9dbada1177d66 Mon Sep 17 00:00:00 2001
From: Jan200101 <sentrycraft123@gmail.com>
Date: Tue, 12 Sep 2023 15:58:16 +0200
Subject: [PATCH 4/9] tests: add tests for discrete detection with mock libs
 Both tests have 4 different ways of testing: - Invalid Device - Unexpected
 Device - Non Discrete GPU (iGPU/APU) - Discrete GPU

---
 src/discrete-detection/meson.build            |  4 +-
 tests/discrete-detection/libdrm_amdgpu_mock.c | 57 +++++++++++++
 .../discrete-detection/libdrm_nouveau_mock.c  | 68 ++++++++++++++++
 tests/discrete-detection/meson.build          | 80 +++++++++++++++++++
 tests/meson.build                             |  2 +
 5 files changed, 209 insertions(+), 2 deletions(-)
 create mode 100644 tests/discrete-detection/libdrm_amdgpu_mock.c
 create mode 100644 tests/discrete-detection/libdrm_nouveau_mock.c
 create mode 100644 tests/discrete-detection/meson.build

diff --git a/src/discrete-detection/meson.build b/src/discrete-detection/meson.build
index 3a6c03f..8eb8437 100644
--- a/src/discrete-detection/meson.build
+++ b/src/discrete-detection/meson.build
@@ -1,6 +1,6 @@
 
 if libdrm_amdgpu.found()
-  executable('check-discrete-amdgpu',
+  amdgpu_discrete = executable('check-discrete-amdgpu',
     files('amdgpu.c'),
     dependencies: deps,
     install: true,
@@ -9,7 +9,7 @@ if libdrm_amdgpu.found()
 endif
 
 if libdrm.found() and libdrm_nouveau.found()
-  executable('check-discrete-nouveau',
+  nouveau_discrete = executable('check-discrete-nouveau',
     files('nouveau.c'),
     dependencies: deps,
     install: true,
diff --git a/tests/discrete-detection/libdrm_amdgpu_mock.c b/tests/discrete-detection/libdrm_amdgpu_mock.c
new file mode 100644
index 0000000..20fa4aa
--- /dev/null
+++ b/tests/discrete-detection/libdrm_amdgpu_mock.c
@@ -0,0 +1,57 @@
+#include <string.h>
+#include <stdint.h>
+#include <stdio.h>
+
+#include <amdgpu_drm.h>
+
+enum {
+	OTHER_GPU,
+	AMD_APU,
+	AMD_GPU,
+};
+
+/* Mock open(2) so we can test multiple devices configurations */
+int open(const char *pathname, int flags)
+{
+	if (!strcmp(pathname, "OTHER_GPU"))
+		return OTHER_GPU;
+	if (!strcmp (pathname, "AMD_APU"))
+		return AMD_APU;
+	if (!strcmp (pathname, "AMD_GPU"))
+		return AMD_GPU;
+
+	return -1;
+}
+
+/* open64 may be used for large file support */
+int open64(const char *pathname, int flags)
+{
+	return open (pathname, flags);
+}
+
+int amdgpu_device_initialize(int fd, uint32_t *major_version, uint32_t *minor_version, int *device_handle)
+{
+	// Store the fd in the device handle for access in query_info
+	*device_handle = fd;
+
+	if (fd != AMD_GPU && fd != AMD_APU)
+		return 1;
+
+	return 0;
+}
+
+int amdgpu_query_info(int device_handle, unsigned info_id, unsigned size, void *value)
+{
+	struct drm_amdgpu_info_device* device_info = value;
+
+	if (device_handle == AMD_GPU) {
+		device_info->ids_flags = 0;
+		return 0;
+	}
+	if (device_handle == AMD_APU) {
+		device_info->ids_flags = AMDGPU_IDS_FLAGS_FUSION;
+		return 0;
+	}
+
+	return 1;
+}
diff --git a/tests/discrete-detection/libdrm_nouveau_mock.c b/tests/discrete-detection/libdrm_nouveau_mock.c
new file mode 100644
index 0000000..cdbfda8
--- /dev/null
+++ b/tests/discrete-detection/libdrm_nouveau_mock.c
@@ -0,0 +1,68 @@
+#include <string.h>
+#include <stdint.h>
+#include <stdio.h>
+
+#include <xf86drm.h>
+#include <nouveau_drm.h>
+#include <nouveau/nvif/ioctl.h>
+#include <nvif/cl0080.h>
+#include <nvif/class.h>
+
+enum {
+	OTHER_GPU,
+	NVIDIA_IGPU,
+	NVIDIA_GPU,
+};
+
+/* Mock open(2) so we can test multiple devices configurations */
+int open(const char *pathname, int flags)
+{
+	if (!strcmp(pathname, "OTHER_GPU"))
+		return OTHER_GPU;
+	if (!strcmp (pathname, "NVIDIA_IGPU"))
+		return NVIDIA_IGPU;
+	if (!strcmp (pathname, "NVIDIA_GPU"))
+		return NVIDIA_GPU;
+
+	return -1;
+}
+
+/* open64 may be used for large file support */
+int open64(const char *pathname, int flags)
+{
+	return open (pathname, flags);
+}
+
+int drmCommandWrite(int fd, unsigned long drmCommandIndex, void *data, unsigned long size)
+{
+	if (drmCommandIndex != DRM_NOUVEAU_NVIF)
+		return 1;
+
+	if (fd != NVIDIA_GPU && fd != NVIDIA_IGPU)
+		return 1;
+
+	return 0;
+}
+
+int drmCommandWriteRead(int fd, unsigned long drmCommandIndex, void *data, unsigned long size)
+{
+	if (drmCommandIndex != DRM_NOUVEAU_NVIF)
+		return 1;
+
+	struct {
+		struct nvif_ioctl_v0 ioctl;
+		struct nvif_ioctl_mthd_v0 mthd;
+		struct nv_device_info_v0 info;
+	} *args = data;
+
+	if (fd == NVIDIA_GPU) {
+		args->info.platform = NV_DEVICE_INFO_V0_PCIE;
+		return 0;
+	}
+	if (fd == NVIDIA_IGPU) {
+		args->info.platform = NV_DEVICE_INFO_V0_IGP;
+		return 0;	
+	}
+
+	return 1;
+}
\ No newline at end of file
diff --git a/tests/discrete-detection/meson.build b/tests/discrete-detection/meson.build
new file mode 100644
index 0000000..f01a014
--- /dev/null
+++ b/tests/discrete-detection/meson.build
@@ -0,0 +1,80 @@
+
+if libdrm_amdgpu.found()
+    amdgpu_mock_lib = shared_library(
+        'drm_amdgpu_mock',
+        files('libdrm_amdgpu_mock.c'),
+        dependencies: libdrm_amdgpu
+    )
+
+    test(
+        'test amdgpu detection with invalid device',
+        amdgpu_discrete,
+        args: ['NO_GPU'],
+        env: environment({'LD_PRELOAD': amdgpu_mock_lib.full_path()}),
+        should_fail: true
+    )
+
+    test(
+        'test amdgpu detection with non-AMD GPU',
+        amdgpu_discrete,
+        args: ['OTHER_GPU'],
+        env: environment({'LD_PRELOAD': amdgpu_mock_lib.full_path()}),
+        should_fail: true
+    )
+
+    test(
+        'test amdgpu detection with AMD APU',
+        amdgpu_discrete,
+        args: ['AMD_APU'],
+        env: environment({'LD_PRELOAD': amdgpu_mock_lib.full_path()}),
+        should_fail: true
+    )
+
+    test(
+        'test amdgpu detection with AMD GPU',
+        amdgpu_discrete,
+        args: ['AMD_GPU'],
+        env: environment({'LD_PRELOAD': amdgpu_mock_lib.full_path()}),
+        should_fail: false
+    )
+endif
+
+if libdrm.found() and libdrm_nouveau.found()
+    nouveau_mock_lib = shared_library(
+        'drm_nouveau_mock',
+        files('libdrm_nouveau_mock.c'),
+        dependencies: [libdrm, libdrm_nouveau]
+    )
+
+    test(
+        'test nouveau detection with invalid device',
+        nouveau_discrete,
+        args: ['NO_GPU'],
+        env: environment({'LD_PRELOAD': nouveau_mock_lib.full_path()}),
+        should_fail: true
+    )
+
+    test(
+        'test nouveau detection with non-Nvidia GPU',
+        nouveau_discrete,
+        args: ['OTHER_GPU'],
+        env: environment({'LD_PRELOAD': nouveau_mock_lib.full_path()}),
+        should_fail: true
+    )
+
+    test(
+        'test nouveau detection with Nvidia iGPU',
+        nouveau_discrete,
+        args: ['NVIDIA_IGPU'],
+        env: environment({'LD_PRELOAD': nouveau_mock_lib.full_path()}),
+        should_fail: true
+    )
+
+    test(
+        'test nouveau detection with Nvidia GPU',
+        nouveau_discrete,
+        args: ['NVIDIA_GPU'],
+        env: environment({'LD_PRELOAD': nouveau_mock_lib.full_path()}),
+        should_fail: false
+    )
+endif
\ No newline at end of file
diff --git a/tests/meson.build b/tests/meson.build
index b0b7476..61ef00c 100644
--- a/tests/meson.build
+++ b/tests/meson.build
@@ -15,3 +15,5 @@ foreach ut: unit_tests
          env: envs,
         )
 endforeach
+
+subdir('discrete-detection')
-- 
GitLab


From 7843d33eea5e9529ec3b2876b322e1329bcaf077 Mon Sep 17 00:00:00 2001
From: Jan200101 <sentrycraft123@gmail.com>
Date: Tue, 12 Sep 2023 15:57:47 +0200
Subject: [PATCH 5/9] main: remove leftover and fix typo

---
 meson_options.txt        | 2 +-
 src/switcheroo-control.c | 1 -
 2 files changed, 1 insertion(+), 2 deletions(-)

diff --git a/meson_options.txt b/meson_options.txt
index b8d671a..c77fea8 100644
--- a/meson_options.txt
+++ b/meson_options.txt
@@ -13,7 +13,7 @@ option('hwdbdir',
 option('rulesdir',
   type: 'string',
   value: '',
-  description: 'Directory for ruke files',
+  description: 'Directory for rule files',
 )
 
 option('gtk_doc',
diff --git a/src/switcheroo-control.c b/src/switcheroo-control.c
index 39d1cf6..84c7108 100644
--- a/src/switcheroo-control.c
+++ b/src/switcheroo-control.c
@@ -347,7 +347,6 @@ static gboolean
 get_card_is_discrete (GUdevDevice *d)
 {
 	const char * const * tags;
-	g_autoptr (GUdevDevice) platform_device = NULL;
 
 	tags = g_udev_device_get_tags (d);
 	if (tags && g_strv_contains (tags, "switcheroo-discrete-gpu"))
-- 
GitLab


From dfa369b08c85bf878a2c5c15c02bd737303fed9a Mon Sep 17 00:00:00 2001
From: Jan200101 <sentrycraft123@gmail.com>
Date: Tue, 12 Sep 2023 15:58:27 +0200
Subject: [PATCH 6/9] main: move discrete dependencies out of main deps

---
 src/discrete-detection/meson.build | 5 +++--
 src/meson.build                    | 2 +-
 2 files changed, 4 insertions(+), 3 deletions(-)

diff --git a/src/discrete-detection/meson.build b/src/discrete-detection/meson.build
index 8eb8437..353316f 100644
--- a/src/discrete-detection/meson.build
+++ b/src/discrete-detection/meson.build
@@ -1,8 +1,9 @@
+discrete_deps = deps + [libdrm, libdrm_nouveau, libdrm_amdgpu]
 
 if libdrm_amdgpu.found()
   amdgpu_discrete = executable('check-discrete-amdgpu',
     files('amdgpu.c'),
-    dependencies: deps,
+    dependencies: discrete_deps,
     install: true,
     install_dir: libexecdir,
   )
@@ -11,7 +12,7 @@ endif
 if libdrm.found() and libdrm_nouveau.found()
   nouveau_discrete = executable('check-discrete-nouveau',
     files('nouveau.c'),
-    dependencies: deps,
+    dependencies: discrete_deps,
     install: true,
     install_dir: libexecdir,
   )
diff --git a/src/meson.build b/src/meson.build
index da4267f..22d69e7 100644
--- a/src/meson.build
+++ b/src/meson.build
@@ -1,4 +1,4 @@
-deps = [glib, gio, gudev, libdrm, libdrm_nouveau, libdrm_amdgpu]
+deps = [glib, gio, gudev]
 
 sources = [
   'info-cleanup.c',
-- 
GitLab


From 9e1e406d7f79da5868bd396b0cf005ca3d635772 Mon Sep 17 00:00:00 2001
From: Jan200101 <sentrycraft123@gmail.com>
Date: Tue, 12 Sep 2023 17:12:00 +0200
Subject: [PATCH 7/9] main: use glib for discrete command-line arguments

---
 src/discrete-detection/amdgpu.c  | 29 ++++++++++++++++++++---------
 src/discrete-detection/nouveau.c | 29 ++++++++++++++++++++---------
 2 files changed, 40 insertions(+), 18 deletions(-)

diff --git a/src/discrete-detection/amdgpu.c b/src/discrete-detection/amdgpu.c
index 2d9804f..5a9a4ab 100644
--- a/src/discrete-detection/amdgpu.c
+++ b/src/discrete-detection/amdgpu.c
@@ -1,9 +1,10 @@
-
 #include <fcntl.h>
 #include <stdlib.h>
 #include <stdio.h>
+#include <locale.h>
 #include <gio/gio.h>
 #include <gudev/gudev.h>
+#include <glib.h>
 
 #include <amdgpu.h>
 #include <amdgpu_drm.h>
@@ -12,22 +13,32 @@ typedef int handle;
 G_DEFINE_AUTO_CLEANUP_FREE_FUNC(handle, close, -1)
 G_DEFINE_AUTOPTR_CLEANUP_FUNC(amdgpu_device_handle, free);
 
-int main(int argc, char** argv)
+int main (int argc, char** argv)
 {
-	if (argc < 2)
-	{
-		puts ("check-discrete-amdgpu [DEVNAME]");
-		return EXIT_FAILURE;
-	}
-
 	const char *devname;
 	g_auto(handle) fd = -1;
-	g_autoptr(GUdevDevice) parent = NULL;
 	struct drm_amdgpu_info_device device_info = {0};
 	amdgpu_device_handle device = NULL;
 	uint32_t drm_major, drm_minor;
+	g_autoptr(GOptionContext) option_context = NULL;
+	g_autoptr(GError) error = NULL;
 
+	setlocale (LC_ALL, "");
+	option_context = g_option_context_new ("");
+
+	if (!g_option_context_parse (option_context, &argc, &argv, &error)) {
+		g_print ("Failed to parse arguments: %s\n", error->message);
+		return EXIT_FAILURE;
+	}
+
+	if (argc < 2)
+	{
+		g_print ("%s\n", g_option_context_get_help (option_context, TRUE, NULL));
+		return EXIT_FAILURE;
+	}
 	devname = argv[1];
+;
+
 	fd = open (devname, O_RDWR);
 	if (fd < 0)
 		return EXIT_FAILURE;
diff --git a/src/discrete-detection/nouveau.c b/src/discrete-detection/nouveau.c
index 0a1f220..1d61cbb 100644
--- a/src/discrete-detection/nouveau.c
+++ b/src/discrete-detection/nouveau.c
@@ -1,9 +1,10 @@
-
 #include <fcntl.h>
 #include <stdlib.h>
 #include <stdio.h>
+#include <locale.h>
 #include <gio/gio.h>
 #include <gudev/gudev.h>
+#include <glib.h>
 
 #include <xf86drm.h>
 #include <nouveau_drm.h>
@@ -14,23 +15,34 @@
 typedef int handle;
 G_DEFINE_AUTO_CLEANUP_FREE_FUNC(handle, close, -1)
 
-int main(int argc, char** argv)
+int main (int argc, char** argv)
 {
+	const gchar *devname = NULL;
+	g_auto(handle) fd = -1;
+	g_autofree void *device = NULL;
+	g_autoptr(GOptionContext) option_context = NULL;
+	g_autoptr(GError) error = NULL;
+
+	setlocale (LC_ALL, "");
+	option_context = g_option_context_new ("");
+
+	if (!g_option_context_parse (option_context, &argc, &argv, &error)) {
+		g_print ("Failed to parse arguments: %s\n", error->message);
+		return EXIT_FAILURE;
+	}
+
 	if (argc < 2)
 	{
-		puts ("check-discrete-nouveau [DEVNAME]");
+		g_print ("%s\n", g_option_context_get_help (option_context, TRUE, NULL));
 		return EXIT_FAILURE;
 	}
-
-	const char *devname;
-	g_auto(handle) fd = -1;
-
 	devname = argv[1];
+
 	fd = open (devname, O_RDWR);
 	if (fd < 0)
 		return EXIT_FAILURE;
 
-	g_autofree void *device = malloc(352);
+	device = malloc(352);
 
 	/* Init device */
 	{	
@@ -88,7 +100,6 @@ int main(int argc, char** argv)
 	if (drmCommandWriteRead (fd, DRM_NOUVEAU_NVIF, &args, sizeof(args)))
 		return EXIT_FAILURE;
 
-
 	switch (args.info.platform)
 	{
 		case NV_DEVICE_INFO_V0_IGP:
-- 
GitLab


From 0bb08115acf7e9ed235f00df5bbcb5bc2316cea7 Mon Sep 17 00:00:00 2001
From: Jan200101 <sentrycraft123@gmail.com>
Date: Wed, 14 Feb 2024 20:25:42 +0100
Subject: [PATCH 8/9] main: add udev rule for i915 checking a lot of systems
 has shown that the intel iGPU will always be available at `0000:00:02.0`.
 Using ID_PATH would have been cleaner, but I couldn't get it to work.

---
 data/30-discrete-gpu.rules.in | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/data/30-discrete-gpu.rules.in b/data/30-discrete-gpu.rules.in
index a803ed4..f30f315 100644
--- a/data/30-discrete-gpu.rules.in
+++ b/data/30-discrete-gpu.rules.in
@@ -1,3 +1,4 @@
 DRIVERS=="amdgpu", SUBSYSTEM=="drm", PROGRAM="@libexecdir@/check-discrete-amdgpu $env{DEVNAME}", TAG+="switcheroo-discrete-gpu"
 DRIVERS=="nouveau", SUBSYSTEM=="drm", PROGRAM="@libexecdir@/check-discrete-nouveau $env{DEVNAME}", TAG+="switcheroo-discrete-gpu"
-DRIVERS=="nvidia", TAG+="switcheroo-discrete-gpu"
+DRIVERS=="nvidia", SUBSYSTEM=="drm", TAG+="switcheroo-discrete-gpu"
+DRIVERS=="i915", SUBSYSTEM=="drm", DEVPATH!="/devices/pci0000:00/0000:00:02.0/drm/*", TAG+="switcheroo-discrete-gpu"
-- 
GitLab


From 4bf9412c2d5ddd1639ffe30fcccf824bba29b355 Mon Sep 17 00:00:00 2001
From: Jan200101 <sentrycraft123@gmail.com>
Date: Thu, 15 Feb 2024 16:24:00 +0100
Subject: [PATCH 9/9] main: use Discrete key in switcherooctl

---
 src/switcherooctl.in | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/src/switcherooctl.in b/src/switcherooctl.in
index 96c21cc..c0e3f07 100755
--- a/src/switcherooctl.in
+++ b/src/switcherooctl.in
@@ -77,6 +77,7 @@ def print_gpu(gpu, index):
     print('Device:', index)
     print('  Name:       ', gpu['Name'])
     print('  Default:    ', "yes" if gpu['Default'] else "no")
+    print('  Discrete:   ', "yes" if gpu['Discrete'] else "no")
     print('  Environment:', env_to_str(gpu['Environment']))
 
 def _list():
@@ -126,7 +127,7 @@ def get_discrete_gpu():
         return None
 
     try:
-        gpu = next(gpu for gpu in gpus if not gpu['Default'])
+        gpu = next(gpu for gpu in gpus if gpu['Discrete'])
     except StopIteration:
         return None
     else:
-- 
GitLab

