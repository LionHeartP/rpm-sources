From a8e4806f7c9cfbd3940cfb97316a9eefbed8f99f Mon Sep 17 00:00:00 2001
From: Xavier Claessens <xavier.claessens@collabora.com>
Date: Mon, 25 Mar 2024 09:16:49 -0400
Subject: [PATCH 1/4] NautilusWindowSlot: Fix grabbing focus after loading
 initial view

When view_started_loading() is first called self->content_view is NULL
and thus focus is given to self->new_content_view which is not yet part
of the window UI and thus cannot receive the focus.

Instead, wait for view_ended_loading() because at that stage
self->content_view is set and has been added into self->vbox.

Visible effect: Using left/right arrows after startup used to move focus
within top bar, it now selects next/prev file. With type-ahead browsing,
pressing ENTER after typing a file name immediately after startup used
to have no effect, it now correctly opens the folder.
---
 src/nautilus-window-slot.c | 16 ++++++++--------
 1 file changed, 8 insertions(+), 8 deletions(-)

diff --git a/src/nautilus-window-slot.c b/src/nautilus-window-slot.c
index f2fbd8dcf..b5e8be9eb 100644
--- a/src/nautilus-window-slot.c
+++ b/src/nautilus-window-slot.c
@@ -2534,14 +2534,6 @@ view_started_loading (NautilusWindowSlot *self,
         nautilus_window_slot_set_allow_stop (self, TRUE);
     }
 
-    /* Only grab focus if the menu isn't showing. Otherwise the menu disappears
-     * e.g. when the user toggles Show Hidden Files
-     */
-    if (!nautilus_window_is_menu_visible (self->window))
-    {
-        gtk_widget_grab_focus (GTK_WIDGET (self->window));
-    }
-
     nautilus_window_slot_set_loading (self, TRUE);
 }
 
@@ -2560,6 +2552,14 @@ view_ended_loading (NautilusWindowSlot *self,
         self->needs_reload = FALSE;
     }
 
+    /* Only grab focus if the menu isn't showing. Otherwise the menu disappears
+     * e.g. when the user toggles Show Hidden Files
+     */
+    if (!nautilus_window_is_menu_visible (self->window))
+    {
+        gtk_widget_grab_focus (GTK_WIDGET (self->window));
+    }
+
     nautilus_window_slot_set_allow_stop (self, FALSE);
 
     nautilus_window_slot_set_loading (self, FALSE);
-- 
2.44.0

From afd5453a72e2a3d1a71a4c0e9e9d27d08961d26d Mon Sep 17 00:00:00 2001
From: Xavier Claessens <xavier.claessens@collabora.com>
Date: Mon, 28 Nov 2022 15:18:15 -0500
Subject: [PATCH 2/4] Support type ahead for fast browsing

Searching is too slow when fast browsing directory tree. Even when
recursing searching is disabled, it still takes time to load the new
view and it breaks the browsing work flow.

The use-case is when user has a very well known tree and want to open a
file, for example "sources/nautilus/src/meson.build", they would type
*VERY* fast: "s" <enter> "n" <enter> "s" <enter> "m" <enter>. When going
many times per day into the same location, it becomes muscle memory,
just like tab in a terminal.

This is similar to how at least Windows file browser works.
---
 data/org.gnome.nautilus.gschema.xml           |   5 +
 src/nautilus-files-view.c                     |  16 +++
 src/nautilus-files-view.h                     |   5 +
 src/nautilus-global-preferences.h             |   1 +
 src/nautilus-preferences-window.c             |   5 +
 src/nautilus-query-editor.c                   |   6 +
 src/nautilus-window-slot.c                    | 114 +++++++++++++++---
 .../ui/nautilus-preferences-window.ui         |  15 +++
 8 files changed, 152 insertions(+), 15 deletions(-)

diff --git a/data/org.gnome.nautilus.gschema.xml b/data/org.gnome.nautilus.gschema.xml
index 0776bd658..91a0a4ce0 100644
--- a/data/org.gnome.nautilus.gschema.xml
+++ b/data/org.gnome.nautilus.gschema.xml
@@ -82,6 +82,11 @@
       <summary>Always use the location entry, instead of the pathbar</summary>
       <description>If set to true, Files will always use a textual input entry for the location toolbar, instead of the pathbar.</description>
     </key>
+    <key type="b" name="type-ahead-search">
+      <default>true</default>
+      <summary>Start searching on type ahead</summary>
+      <description>If set to true, typing on the files viewer will start searching. Otherwise it select first matching file.</description>
+    </key>
     <key name="recursive-search" enum="org.gnome.nautilus.SpeedTradeoff">
       <default>'local-only'</default>
       <summary>Where to perform recursive search</summary>
diff --git a/src/nautilus-files-view.c b/src/nautilus-files-view.c
index d256ac6a7..ddf13e7f1 100644
--- a/src/nautilus-files-view.c
+++ b/src/nautilus-files-view.c
@@ -9879,3 +9879,19 @@ nautilus_files_view_new (guint               id,
 
     return view;
 }
+
+void
+nautilus_files_view_get_sort_state(NautilusFilesView *view,
+                                   GQuark            *sort_attribute,
+                                   gboolean          *reversed,
+                                   gboolean          *directories_first)
+{
+    NautilusFilesViewPrivate *priv = nautilus_files_view_get_instance_private (view);
+
+    g_autoptr(GVariant) value = nautilus_list_base_get_sort_state(priv->list_base);
+    const gchar *target_name;
+    g_variant_get(value, "(&sb)", &target_name, reversed);
+    *sort_attribute = g_quark_from_string(target_name);
+    *directories_first = g_settings_get_boolean(gtk_filechooser_preferences,
+                                                NAUTILUS_PREFERENCES_SORT_DIRECTORIES_FIRST);
+}
diff --git a/src/nautilus-files-view.h b/src/nautilus-files-view.h
index 428a419c0..9e3bffd9f 100644
--- a/src/nautilus-files-view.h
+++ b/src/nautilus-files-view.h
@@ -162,4 +162,9 @@ void              nautilus_files_view_update_context_menus       (NautilusFilesV
 void              nautilus_files_view_update_toolbar_menus       (NautilusFilesView      *view);
 void              nautilus_files_view_update_actions_state       (NautilusFilesView      *view);
 
+void              nautilus_files_view_get_sort_state             (NautilusFilesView      *view,
+                                                                  GQuark                 *sort_attribute,
+                                                                  gboolean               *reversed,
+                                                                  gboolean               *directories_first);
+
 G_END_DECLS
diff --git a/src/nautilus-global-preferences.h b/src/nautilus-global-preferences.h
index d39c0f144..1d4249440 100644
--- a/src/nautilus-global-preferences.h
+++ b/src/nautilus-global-preferences.h
@@ -116,6 +116,7 @@ typedef enum
 
 /* Search behaviour */
 #define NAUTILUS_PREFERENCES_RECURSIVE_SEARCH "recursive-search"
+#define NAUTILUS_PREFERENCES_TYPE_AHEAD_SEARCH "type-ahead-search"
 
 /* Context menu options */
 #define NAUTILUS_PREFERENCES_SHOW_DELETE_PERMANENTLY "show-delete-permanently"
diff --git a/src/nautilus-preferences-window.c b/src/nautilus-preferences-window.c
index aa5517763..ccef83f5a 100644
--- a/src/nautilus-preferences-window.c
+++ b/src/nautilus-preferences-window.c
@@ -42,6 +42,8 @@
         "show_create_link_row"
 #define NAUTILUS_PREFERENCES_DIALOG_LIST_VIEW_USE_TREE_WIDGET                  \
         "use_tree_view_row"
+#define NAUTILUS_PREFERENCES_DIALOG_TYPE_AHEAD_WIDGET                          \
+        "type_ahead_search"
 
 /* combo preferences */
 #define NAUTILUS_PREFERENCES_DIALOG_OPEN_ACTION_COMBO                          \
@@ -361,6 +363,9 @@ nautilus_preferences_window_setup (GtkBuilder *builder)
     bind_builder_bool (builder, nautilus_preferences,
                        NAUTILUS_PREFERENCES_DIALOG_DELETE_PERMANENTLY_WIDGET,
                        NAUTILUS_PREFERENCES_SHOW_DELETE_PERMANENTLY);
+    bind_builder_bool (builder, nautilus_preferences,
+                       NAUTILUS_PREFERENCES_DIALOG_TYPE_AHEAD_WIDGET,
+                       NAUTILUS_PREFERENCES_TYPE_AHEAD_SEARCH);
 
     setup_detailed_date (builder);
 
diff --git a/src/nautilus-query-editor.c b/src/nautilus-query-editor.c
index 191f12b57..e55c384e8 100644
--- a/src/nautilus-query-editor.c
+++ b/src/nautilus-query-editor.c
@@ -732,6 +732,12 @@ nautilus_query_editor_set_query (NautilusQueryEditor *self,
 
     g_return_if_fail (NAUTILUS_IS_QUERY_EDITOR (self));
 
+    /* Setting query to NULL causes reentry to set it to an empty query */
+    if (self->change_frozen) {
+        g_set_object (&self->query, query);
+        return;
+    }
+
     if (query != NULL)
     {
         text = nautilus_query_get_text (query);
diff --git a/src/nautilus-window-slot.c b/src/nautilus-window-slot.c
index b5e8be9eb..1050bd8d9 100644
--- a/src/nautilus-window-slot.c
+++ b/src/nautilus-window-slot.c
@@ -68,6 +68,10 @@ enum
     NUM_PROPERTIES
 };
 
+
+/* In type ahead mode, clear entry if it did not change for a while */
+#define CLEAR_QUERY_EDITOR_TIMEOUT 1000
+
 struct _NautilusWindowSlot
 {
     GtkBox parent_instance;
@@ -110,6 +114,7 @@ struct _NautilusWindowSlot
     /* Query editor */
     NautilusQueryEditor *query_editor;
     NautilusQuery *pending_search_query;
+    guint clear_query_editor_timeout_id;
 
     /* Banner */
     AdwBanner *banner;
@@ -408,6 +413,48 @@ query_editor_focus_view_callback (NautilusQueryEditor *editor,
     }
 }
 
+static GFile *
+nautilus_window_slot_get_current_location(NautilusWindowSlot *self)
+{
+    if (self->pending_location != NULL)
+    {
+        return self->pending_location;
+    }
+
+    return self->location;
+}
+
+static gboolean
+type_ahead_search (void)
+{
+    return g_settings_get_boolean (nautilus_preferences, NAUTILUS_PREFERENCES_TYPE_AHEAD_SEARCH);
+}
+
+static gboolean
+clear_query_editor_timeout_callback (NautilusWindowSlot *self)
+{
+    nautilus_query_editor_set_query (self->query_editor, NULL);
+    self->clear_query_editor_timeout_id = 0;
+    return G_SOURCE_REMOVE;
+}
+
+typedef struct {
+    GQuark sort_attribute;
+    gboolean directories_first;
+    gboolean reversed;
+} FileCompareForTypeAheadContext;
+
+static int
+file_compare_for_type_ahead (gconstpointer a, gconstpointer b, gpointer user_data)
+{
+    FileCompareForTypeAheadContext *ctx = user_data;
+    return nautilus_file_compare_for_sort_by_attribute_q(NAUTILUS_FILE (a),
+                                                         NAUTILUS_FILE (b),
+                                                         ctx->sort_attribute,
+                                                         ctx->directories_first,
+                                                         ctx->reversed);
+}
+
 static void
 query_editor_changed_callback (NautilusQueryEditor *editor,
                                NautilusQuery       *query,
@@ -418,9 +465,54 @@ query_editor_changed_callback (NautilusQueryEditor *editor,
 
     view = nautilus_window_slot_get_current_view (self);
 
-    /* Setting search query may cause the view to load a new location. */
-    nautilus_view_set_search_query (view, query);
-    nautilus_window_slot_set_location (self, nautilus_view_get_location (view));
+    if (nautilus_window_slot_get_search_visible (self))
+    {
+        /* Setting search query may cause the view to load a new location. */
+        nautilus_view_set_search_query (view, query);
+        nautilus_window_slot_set_location (self, nautilus_view_get_location (view));
+    }
+    else
+    {
+        /* Find all files with a display name that starts with the query, case insensitive. */
+        GFile *location = nautilus_window_slot_get_current_location (self);
+        g_autoptr (NautilusDirectory) directory = nautilus_directory_get (location);
+        const gchar *text = nautilus_query_get_text (query);
+        g_autofree gchar *text_casefold = g_utf8_casefold (text, -1);
+        g_autofree gchar *text_collate = g_utf8_collate_key_for_filename (text_casefold, -1);
+        gsize text_len = strlen (text);
+        g_autolist (NautilusFile) files = nautilus_directory_get_file_list (directory);
+        g_autolist (NautilusFile) matches = NULL;
+        GList *l;
+
+        for (l = files; l; l = l->next)
+        {
+            NautilusFile *file = NAUTILUS_FILE (l->data);
+            const gchar *name = nautilus_file_get_display_name(file);
+            g_autofree gchar *name_casefold = g_utf8_casefold(name, text_len);
+            g_autofree gchar *name_collate = g_utf8_collate_key_for_filename(name_casefold, -1);
+
+            if (g_str_equal (name_collate, text_collate))
+            {
+                matches = g_list_prepend (matches, nautilus_file_ref (file));
+            }
+        }
+
+        /* Select the first match */
+        if (matches != NULL)
+        {
+            FileCompareForTypeAheadContext ctx;
+            nautilus_files_view_get_sort_state (NAUTILUS_FILES_VIEW (view), &ctx.sort_attribute, &ctx.reversed, &ctx.directories_first);
+            matches = g_list_sort_with_data (matches, file_compare_for_type_ahead, &ctx);
+            g_autolist(NautilusFile) selection = g_list_prepend (NULL, g_object_ref (matches->data));
+            nautilus_view_set_selection (self->content_view, selection);
+        }
+
+        /* Reset timeout that clears type ahead query */
+        g_clear_handle_id (&self->clear_query_editor_timeout_id, g_source_remove);
+        self->clear_query_editor_timeout_id = g_timeout_add (CLEAR_QUERY_EDITOR_TIMEOUT,
+                                                             G_SOURCE_FUNC (clear_query_editor_timeout_callback),
+                                                             self);
+    }
 }
 
 static void
@@ -460,17 +552,6 @@ hide_query_editor (NautilusWindowSlot *self)
     }
 }
 
-static GFile *
-nautilus_window_slot_get_current_location (NautilusWindowSlot *self)
-{
-    if (self->pending_location != NULL)
-    {
-        return self->pending_location;
-    }
-
-    return self->location;
-}
-
 static void
 show_query_editor (NautilusWindowSlot *self)
 {
@@ -617,7 +698,7 @@ nautilus_window_slot_handle_event (NautilusWindowSlot    *self,
                                                      state);
     }
 
-    if (retval)
+    if (retval && type_ahead_search ())
     {
         nautilus_window_slot_set_search_visible (self, TRUE);
     }
@@ -1969,6 +2050,9 @@ setup_view (NautilusWindowSlot *self,
 
     nautilus_window_slot_disconnect_content_view (self);
 
+    nautilus_query_editor_set_query (self->query_editor, NULL);
+    g_clear_handle_id (&self->clear_query_editor_timeout_id, g_source_remove);
+
     self->new_content_view = view;
 
     nautilus_window_slot_connect_new_content_view (self);
diff --git a/src/resources/ui/nautilus-preferences-window.ui b/src/resources/ui/nautilus-preferences-window.ui
index 671fd7081..2d815ab95 100644
--- a/src/resources/ui/nautilus-preferences-window.ui
+++ b/src/resources/ui/nautilus-preferences-window.ui
@@ -37,6 +37,21 @@
                 <property name="visible">True</property>
               </object>
             </child>
+            <child>
+              <object class="AdwActionRow">
+                <property name="activatable_widget">type_ahead_search</property>
+                <property name="subtitle_lines">0</property>
+                <property name="title" translatable="yes">Search on type ahead</property>
+                <property name="title_lines">0</property>
+                <property name="use_underline">True</property>
+                <property name="visible">True</property>
+                <child>
+                  <object class="GtkSwitch" id="type_ahead_search">
+                    <property name="valign">center</property>
+                  </object>
+                </child>
+              </object>
+            </child>
           </object>
         </child>
         <child>
-- 
2.44.0

From 2a8e9ca50fb03f80751b83ab7ea08d7dfc77787a Mon Sep 17 00:00:00 2001
From: Xavier Claessens <xavier.claessens@collabora.com>
Date: Fri, 8 Sep 2023 16:06:18 -0400
Subject: [PATCH 3/4] NautilusWindowSlot: Connect signals on query editor only
 once

It is wasteful to connect/disconnect signals each time the editor is
shown/hidden. This also make possible to receive those signals when the
query changed while being hidden for type ahead.
---
 src/nautilus-window-slot.c | 20 +++++++++-----------
 1 file changed, 9 insertions(+), 11 deletions(-)

diff --git a/src/nautilus-window-slot.c b/src/nautilus-window-slot.c
index 1050bd8d9..f2700c07a 100644
--- a/src/nautilus-window-slot.c
+++ b/src/nautilus-window-slot.c
@@ -522,8 +522,6 @@ hide_query_editor (NautilusWindowSlot *self)
 
     view = nautilus_window_slot_get_current_view (self);
 
-    g_signal_handlers_disconnect_by_data (self->query_editor, self);
-
     nautilus_query_editor_set_query (self->query_editor, NULL);
 
     if (nautilus_view_is_searching (view))
@@ -576,15 +574,6 @@ show_query_editor (NautilusWindowSlot *self)
     }
 
     gtk_widget_grab_focus (GTK_WIDGET (self->query_editor));
-
-    g_signal_connect (self->query_editor, "changed",
-                      G_CALLBACK (query_editor_changed_callback), self);
-    g_signal_connect (self->query_editor, "cancel",
-                      G_CALLBACK (query_editor_cancel_callback), self);
-    g_signal_connect (self->query_editor, "activated",
-                      G_CALLBACK (query_editor_activated_callback), self);
-    g_signal_connect (self->query_editor, "focus-view",
-                      G_CALLBACK (query_editor_focus_view_callback), self);
 }
 
 static void
@@ -959,6 +948,15 @@ nautilus_window_slot_constructed (GObject *object)
     gtk_box_append (GTK_BOX (self->vbox), extras_vbox);
 
     self->query_editor = NAUTILUS_QUERY_EDITOR (nautilus_query_editor_new ());
+    g_signal_connect (self->query_editor, "changed",
+                      G_CALLBACK (query_editor_changed_callback), self);
+    g_signal_connect (self->query_editor, "cancel",
+                      G_CALLBACK (query_editor_cancel_callback), self);
+    g_signal_connect (self->query_editor, "activated",
+                      G_CALLBACK (query_editor_activated_callback), self);
+    g_signal_connect (self->query_editor, "focus-view",
+                      G_CALLBACK (query_editor_focus_view_callback), self);
+
     /* We want to keep alive the query editor betwen additions and removals on the
      * UI, specifically when the toolbar adds or removes it */
     g_object_ref_sink (self->query_editor);
-- 
2.44.0

From f5f593bf36c41756a29d5112a10cf7ec70b8eafb Mon Sep 17 00:00:00 2001
From: Jeremy Bicha <jbicha@debian.org>
Date: Wed, 23 Feb 2022 08:06:34 -0500
Subject: [PATCH 4/4] Restore backspace for going to parent folder

This restores the behaviour from nautilus <= 3.4.
---
 src/nautilus-window.c | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/src/nautilus-window.c b/src/nautilus-window.c
index 0f6b5eff9..eb57a4bf8 100644
--- a/src/nautilus-window.c
+++ b/src/nautilus-window.c
@@ -1607,6 +1607,7 @@ const GActionEntry win_entries[] =
     { .name = "forward", .activate = action_forward },
     { .name = "back-n", .activate = action_back_n, .parameter_type = "u" },
     { .name = "forward-n", .activate = action_forward_n, .parameter_type = "u" },
+    { .name = "backspaceup", .activate = action_up },
     { .name = "up", .activate = action_up },
     { .name = "down", .activate = action_down },
     { .name = "current-location-menu", .activate = action_show_current_location_menu },
@@ -1674,6 +1675,7 @@ nautilus_window_initialize_actions (NautilusWindow *window)
     nautilus_application_set_accelerators (app, "win.bookmark-current-location", ACCELS ("<control>d", "AddFavorite"));
     nautilus_application_set_accelerator (app, "win.up", "<alt>Up");
     nautilus_application_set_accelerator (app, "win.down", "<alt>Down");
+    nautilus_application_set_accelerator (app, "win.backspaceup", "BackSpace");
     nautilus_application_set_accelerators (app, "win.go-home", ACCELS ("<alt>Home", "HomePage", "Start"));
     nautilus_application_set_accelerator (app, "win.go-starred", "Favorites");
     nautilus_application_set_accelerator (app, "win.tab-move-left", "<shift><control>Page_Up");
-- 
2.44.0

