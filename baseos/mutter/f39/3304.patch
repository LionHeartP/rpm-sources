From aff67a5b0a765f55a8f44e9f8ef1aa9e8c10849e Mon Sep 17 00:00:00 2001
From: Daniel van Vugt <daniel.van.vugt@canonical.com>
Date: Fri, 6 Oct 2023 17:37:07 +0800
Subject: [PATCH 1/8] gles3: Add function: meta_gles3_finish

---
 src/backends/meta-gles3.c | 6 ++++++
 src/backends/meta-gles3.h | 2 ++
 2 files changed, 8 insertions(+)

diff --git a/src/backends/meta-gles3.c b/src/backends/meta-gles3.c
index 7634263a35f..cc74c41a871 100644
--- a/src/backends/meta-gles3.c
+++ b/src/backends/meta-gles3.c
@@ -139,6 +139,12 @@ meta_gles3_has_extensions (MetaGles3    *gles3,
   return has_extensions;
 }
 
+void
+meta_gles3_finish (MetaGles3 *gles3)
+{
+  glFinish ();
+}
+
 MetaGles3 *
 meta_gles3_new (MetaEgl *egl)
 {
diff --git a/src/backends/meta-gles3.h b/src/backends/meta-gles3.h
index 3773f01bab1..115933b8c3e 100644
--- a/src/backends/meta-gles3.h
+++ b/src/backends/meta-gles3.h
@@ -45,6 +45,8 @@ gboolean meta_gles3_has_extensions (MetaGles3    *gles3,
                                     const char   *first_extension,
                                     ...);
 
+void meta_gles3_finish (MetaGles3 *gles3);
+
 MetaGles3 * meta_gles3_new (MetaEgl *egl);
 
 #define GLBAS(gles3, func, args)                                               \
-- 
GitLab


From 3b62e41b2316df0f174a802709678e34c923958c Mon Sep 17 00:00:00 2001
From: Daniel van Vugt <daniel.van.vugt@canonical.com>
Date: Fri, 6 Oct 2023 17:37:22 +0800
Subject: [PATCH 2/8] onscreen/native: Sync secondary GPU rendering when
 COGL_DEBUG=sync-frame

So that the reported render times are more correct and correlate with
the frame rate when running `CLUTTER_SHOW_FPS=1 COGL_DEBUG=sync-frame`.
---
 src/backends/native/meta-onscreen-native.c | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/src/backends/native/meta-onscreen-native.c b/src/backends/native/meta-onscreen-native.c
index 2388a44a282..0616ecdbdf1 100644
--- a/src/backends/native/meta-onscreen-native.c
+++ b/src/backends/native/meta-onscreen-native.c
@@ -651,6 +651,9 @@ copy_shared_framebuffer_gpu (CoglOnscreen                        *onscreen,
       return NULL;
     }
 
+  if (G_UNLIKELY (COGL_DEBUG_ENABLED (COGL_DEBUG_SYNC_FRAME)))
+    meta_gles3_finish (gles3);
+
   if (!meta_egl_swap_buffers (egl,
                               egl_display,
                               secondary_gpu_state->egl_surface,
-- 
GitLab


From 257b10baa9be5ea77ba8ca50ae84b4fa60d9ab71 Mon Sep 17 00:00:00 2001
From: Daniel van Vugt <daniel.van.vugt@canonical.com>
Date: Wed, 20 Sep 2023 19:31:35 +0800
Subject: [PATCH 3/8] onscreen/native: Try gbm_surface_create_with_modifiers*
 first

Nvidia only supports gbm_surface_create_with_modifiers, but we should try
all the forms in order of preference.
---
 src/backends/native/meta-onscreen-native.c | 28 ++++++++++++++++++----
 1 file changed, 24 insertions(+), 4 deletions(-)

diff --git a/src/backends/native/meta-onscreen-native.c b/src/backends/native/meta-onscreen-native.c
index 0616ecdbdf1..5c5c039b072 100644
--- a/src/backends/native/meta-onscreen-native.c
+++ b/src/backends/native/meta-onscreen-native.c
@@ -2038,6 +2038,7 @@ init_secondary_gpu_state_gpu_copy_mode (MetaRendererNative         *renderer_nat
   MetaOnscreenNativeSecondaryGpuState *secondary_gpu_state;
   MetaGpuKms *gpu_kms;
   uint32_t format;
+  const uint32_t flags = GBM_BO_USE_SCANOUT | GBM_BO_USE_RENDERING;
 
   render_device = renderer_gpu_data->render_device;
   egl_display = meta_render_device_get_egl_display (render_device);
@@ -2049,10 +2050,29 @@ init_secondary_gpu_state_gpu_copy_mode (MetaRendererNative         *renderer_nat
 
   render_device_gbm = META_RENDER_DEVICE_GBM (render_device);
   gbm_device = meta_render_device_gbm_get_gbm_device (render_device_gbm);
-  gbm_surface = gbm_surface_create (gbm_device,
-                                    width, height,
-                                    format,
-                                    GBM_BO_USE_SCANOUT | GBM_BO_USE_RENDERING);
+
+  gbm_surface = gbm_surface_create_with_modifiers2 (gbm_device,
+                                                    width, height,
+                                                    format,
+                                                    NULL, 0,
+                                                    flags);
+
+  if (!gbm_surface)
+    {
+      gbm_surface = gbm_surface_create_with_modifiers (gbm_device,
+                                                       width, height,
+                                                       format,
+                                                       NULL, 0);
+    }
+
+  if (!gbm_surface)
+    {
+      gbm_surface = gbm_surface_create (gbm_device,
+                                        width, height,
+                                        format,
+                                        flags);
+    }
+
   if (!gbm_surface)
     {
       g_set_error (error, G_IO_ERROR, G_IO_ERROR_FAILED,
-- 
GitLab


From 7ec7140b36c4901c72ac08795e9e17bb0148b730 Mon Sep 17 00:00:00 2001
From: Daniel van Vugt <daniel.van.vugt@canonical.com>
Date: Tue, 3 Oct 2023 17:38:47 +0800
Subject: [PATCH 4/8] egl: Add function: meta_egl_query_string

---
 src/backends/meta-egl.c | 8 ++++++++
 src/backends/meta-egl.h | 4 ++++
 2 files changed, 12 insertions(+)

diff --git a/src/backends/meta-egl.c b/src/backends/meta-egl.c
index ac19828c4cd..c468c6f970c 100644
--- a/src/backends/meta-egl.c
+++ b/src/backends/meta-egl.c
@@ -238,6 +238,14 @@ meta_egl_has_extensions (MetaEgl      *egl,
   return has_extensions;
 }
 
+const char *
+meta_egl_query_string (MetaEgl    *egl,
+                       EGLDisplay  display,
+                       EGLint      name)
+{
+  return eglQueryString (display, name);
+}
+
 gboolean
 meta_egl_initialize (MetaEgl   *egl,
                      EGLDisplay display,
diff --git a/src/backends/meta-egl.h b/src/backends/meta-egl.h
index 4ed54a53997..55976bfdb15 100644
--- a/src/backends/meta-egl.h
+++ b/src/backends/meta-egl.h
@@ -47,6 +47,10 @@ gboolean meta_egl_has_extensions (MetaEgl      *egl,
                                   const char   *first_extension,
                                   ...);
 
+const char * meta_egl_query_string (MetaEgl    *egl,
+                                    EGLDisplay  display,
+                                    EGLint      name);
+
 gboolean meta_egl_initialize (MetaEgl   *egl,
                               EGLDisplay display,
                               GError   **error);
-- 
GitLab


From 3837d7c19426740f3b6d4867e5c5c8c104fd1f8f Mon Sep 17 00:00:00 2001
From: Daniel van Vugt <daniel.van.vugt@canonical.com>
Date: Tue, 3 Oct 2023 17:39:49 +0800
Subject: [PATCH 5/8] renderer/native: Flag when explicit sync between GPUs is
 required

---
 src/backends/native/meta-renderer-native-private.h | 1 +
 src/backends/native/meta-renderer-native.c         | 6 ++++++
 2 files changed, 7 insertions(+)

diff --git a/src/backends/native/meta-renderer-native-private.h b/src/backends/native/meta-renderer-native-private.h
index 66b987a5c0c..1a4ee2c8106 100644
--- a/src/backends/native/meta-renderer-native-private.h
+++ b/src/backends/native/meta-renderer-native-private.h
@@ -60,6 +60,7 @@ typedef struct _MetaRendererNativeGpuData
   struct {
     MetaSharedFramebufferCopyMode copy_mode;
     gboolean has_EGL_EXT_image_dma_buf_import_modifiers;
+    gboolean needs_explicit_sync;
 
     /* For GPU blit mode */
     EGLContext egl_context;
diff --git a/src/backends/native/meta-renderer-native.c b/src/backends/native/meta-renderer-native.c
index 57cb20b7e91..239b5cb7eda 100644
--- a/src/backends/native/meta-renderer-native.c
+++ b/src/backends/native/meta-renderer-native.c
@@ -1692,6 +1692,7 @@ init_secondary_gpu_data_gpu (MetaRendererNativeGpuData *renderer_gpu_data,
   CoglContext *cogl_context;
   CoglDisplay *cogl_display;
   const char **missing_gl_extensions;
+  const char *egl_vendor;
 
   egl_display = meta_render_device_get_egl_display (render_device);
   if (egl_display == EGL_NO_DISPLAY)
@@ -1758,6 +1759,11 @@ init_secondary_gpu_data_gpu (MetaRendererNativeGpuData *renderer_gpu_data,
     meta_egl_has_extensions (egl, egl_display, NULL,
                              "EGL_EXT_image_dma_buf_import_modifiers",
                              NULL);
+
+  egl_vendor = meta_egl_query_string (egl, egl_display, EGL_VENDOR);
+  if (!g_strcmp0 (egl_vendor, "NVIDIA"))
+    renderer_gpu_data->secondary.needs_explicit_sync = TRUE;
+
   ret = TRUE;
 out:
   maybe_restore_cogl_egl_api (renderer_native);
-- 
GitLab


From 7e86b0323957b6f1338500022d47e3a820195b81 Mon Sep 17 00:00:00 2001
From: Daniel van Vugt <daniel.van.vugt@canonical.com>
Date: Fri, 29 Sep 2023 18:38:26 +0800
Subject: [PATCH 6/8] onscreen/native: Finish primary GPU rendering before
 copying to secondary

As mentioned in the OES_EGL_image_external spec, there is no implicit
sync between the EGLImage producer and consumer. And in this code path
we don't have meta_drm_buffer_gbm_new_lock_front on the primary GPU to
do it for us either. So synchronization has to be done manually or else
the secondary GPU is likely to get an unfinished image.

This problem has only been observed when the secondary GPU is using the
Nvidia proprietary driver.
---
 src/backends/native/meta-onscreen-native.c | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/src/backends/native/meta-onscreen-native.c b/src/backends/native/meta-onscreen-native.c
index 5c5c039b072..1caa06c0e97 100644
--- a/src/backends/native/meta-onscreen-native.c
+++ b/src/backends/native/meta-onscreen-native.c
@@ -618,6 +618,9 @@ copy_shared_framebuffer_gpu (CoglOnscreen                        *onscreen,
   COGL_TRACE_BEGIN_SCOPED (CopySharedFramebufferSecondaryGpu,
                            "FB Copy (secondary GPU)");
 
+  if (renderer_gpu_data->secondary.needs_explicit_sync)
+    cogl_framebuffer_finish (COGL_FRAMEBUFFER (onscreen));
+
   render_device = renderer_gpu_data->render_device;
   egl_display = meta_render_device_get_egl_display (render_device);
 
-- 
GitLab


From 3df8c9d028fcd3ee86069d8fcab0103e607c0e86 Mon Sep 17 00:00:00 2001
From: Daniel van Vugt <daniel.van.vugt@canonical.com>
Date: Fri, 29 Sep 2023 17:19:16 +0800
Subject: [PATCH 7/8] renderer/native-gles3: Remember to set the glViewport

This is a critical part of any OpenGL program. Mesa allowed us to get
away without it and provided a sane default of the full buffer, but
Nvidia seems to default to an empty/zero viewport so would refuse to
paint any pixels.

In the OpenGL ES 2.0 spec this is ambiguous:

> In the initial state, w and h are set to the width and height,
> respectively, of the window into which the GL is to do its rendering.

because the first "window" used is EGL_NO_SURFACE in
init_secondary_gpu_data_gpu. It has no width or height.

In the OpenGL ES 3.0 spec the ambiguity is somewhat resolved:

> If the default framebuffer is bound but no default framebuffer is
> associated with the GL context (see chapter 4), then w and h are
> initially set to zero.

but not entirely resolved because neither spec says whether
EGL_NO_SURFACE should be treated as zero dimensions (Nvidia) or ignored
and not counted as the first "window" (Mesa).
---
 src/backends/native/meta-renderer-native-gles3.c | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/src/backends/native/meta-renderer-native-gles3.c b/src/backends/native/meta-renderer-native-gles3.c
index cf27ba8d461..b1c4a0de919 100644
--- a/src/backends/native/meta-renderer-native-gles3.c
+++ b/src/backends/native/meta-renderer-native-gles3.c
@@ -54,6 +54,8 @@ paint_egl_image (MetaGles3   *gles3,
 
   meta_gles3_clear_error (gles3);
 
+  GLBAS (gles3, glViewport, (0, 0, width, height));
+
   GLBAS (gles3, glGenFramebuffers, (1, &framebuffer));
   GLBAS (gles3, glBindFramebuffer, (GL_READ_FRAMEBUFFER, framebuffer));
 
-- 
GitLab


From c25d7d0b8f6c22be9b0aeed11f6b652ddf41b20f Mon Sep 17 00:00:00 2001
From: Daniel van Vugt <daniel.van.vugt@canonical.com>
Date: Thu, 21 Sep 2023 18:35:24 +0800
Subject: [PATCH 8/8] renderer/native-gles3: Use GL_OES_EGL_image_external, not
 GL_OES_EGL_image

Although MetaRendererNative checks for the GL_OES_EGL_image_external
extension, paint_egl_image was implemented to use GL_OES_EGL_image.
That was a problem because:

 1. Nvidia only knows how to import buffers from Mesa using
    GL_OES_EGL_image_external.
 2. GL_OES_EGL_image_external doesn't support GL_TEXTURE_2D.
 3. glFramebufferTexture2D doesn't support GL_TEXTURE_EXTERNAL_OES.

So we're left with only one option to use GL_OES_EGL_image_external and
GL_TEXTURE_EXTERNAL_OES. This means we can't use glFramebufferTexture2D
anymore, which means we can't use glBlitFramebuffer anymore. We're
resigned to implementing a traditional shader.

As a bonus, this makes us OpenGL ES 2.0 compliant because we've removed
the code that required ES 3.0 (GL_READ_FRAMEBUFFER and glBlitFramebuffer).

Closes: https://gitlab.gnome.org/GNOME/gnome-shell/-/issues/6221,
        https://gitlab.gnome.org/GNOME/mutter/-/issues/2247,
        https://launchpad.net/bugs/1970291
---
 .../native/meta-renderer-native-gles3.c       | 149 +++++++++++++++---
 1 file changed, 128 insertions(+), 21 deletions(-)

diff --git a/src/backends/native/meta-renderer-native-gles3.c b/src/backends/native/meta-renderer-native-gles3.c
index b1c4a0de919..333f9779671 100644
--- a/src/backends/native/meta-renderer-native-gles3.c
+++ b/src/backends/native/meta-renderer-native-gles3.c
@@ -3,6 +3,7 @@
 /*
  * Copyright (C) 2017 Red Hat
  * Copyright (c) 2018 DisplayLink (UK) Ltd.
+ * Copyright (c) 2023 Canonical Ltd.
  *
  * This program is free software; you can redistribute it and/or
  * modify it under the terms of the GNU General Public License as
@@ -43,6 +44,120 @@
 #error "Somehow included OpenGL headers when we shouldn't have"
 #endif
 
+static GQuark shader_program_quark = 0;
+
+static GLuint
+load_shader (const char *src,
+             GLenum      type)
+{
+  GLuint shader = glCreateShader (type);
+
+  if (shader)
+    {
+      GLint compiled;
+
+      glShaderSource (shader, 1, &src, NULL);
+      glCompileShader (shader);
+      glGetShaderiv (shader, GL_COMPILE_STATUS, &compiled);
+      if (!compiled)
+        {
+          GLchar log[1024];
+
+          glGetShaderInfoLog (shader, sizeof (log) - 1, NULL, log);
+          log[sizeof (log) - 1] = '\0';
+          g_warning ("load_shader compile failed: %s", log);
+          glDeleteShader (shader);
+          shader = 0;
+        }
+    }
+
+  return shader;
+}
+
+static void
+ensure_shader_program (MetaGles3 *gles3)
+{
+  static const char vertex_shader_source[] =
+    "#version 100\n"
+    "attribute vec2 position;\n"
+    "attribute vec2 texcoord;\n"
+    "varying vec2 v_texcoord;\n"
+    "\n"
+    "void main()\n"
+    "{\n"
+    "  gl_Position = vec4(position, 0.0, 1.0);\n"
+    "  v_texcoord = texcoord;\n"
+    "}\n";
+
+  static const char fragment_shader_source[] =
+    "#version 100\n"
+    "#extension GL_OES_EGL_image_external : require\n"
+    "precision mediump float;\n"
+    "uniform samplerExternalOES s_texture;\n"
+    "varying vec2 v_texcoord;\n"
+    "\n"
+    " void main()\n"
+    "{\n"
+    "  gl_FragColor = texture2D(s_texture, v_texcoord);\n"
+    "}\n";
+
+  static const GLfloat box[] =
+    { /* position    texcoord */
+      -1.0f,  1.0f, 0.0f, 0.0f,
+       1.0f,  1.0f, 1.0f, 0.0f,
+       1.0f, -1.0f, 1.0f, 1.0f,
+      -1.0f, -1.0f, 0.0f, 1.0f,
+    };
+  GLint linked;
+  GLuint vertex_shader, fragment_shader;
+  GLint position_attrib, texcoord_attrib;
+  GLuint shader_program;
+
+  if (!shader_program_quark)
+    shader_program_quark = g_quark_from_static_string ("shader program");
+
+  if (g_object_get_qdata (G_OBJECT (gles3), shader_program_quark))
+    return;
+
+  shader_program = glCreateProgram ();
+  g_return_if_fail (shader_program);
+  g_object_set_qdata_full (G_OBJECT (gles3),
+                           shader_program_quark,
+                           GUINT_TO_POINTER (shader_program),
+                           NULL);
+
+  vertex_shader = load_shader (vertex_shader_source, GL_VERTEX_SHADER);
+  g_return_if_fail (vertex_shader);
+  fragment_shader = load_shader (fragment_shader_source, GL_FRAGMENT_SHADER);
+  g_return_if_fail (fragment_shader);
+
+  GLBAS (gles3, glAttachShader, (shader_program, vertex_shader));
+  GLBAS (gles3, glAttachShader, (shader_program, fragment_shader));
+  GLBAS (gles3, glLinkProgram, (shader_program));
+  GLBAS (gles3, glGetProgramiv, (shader_program, GL_LINK_STATUS, &linked));
+  if (!linked)
+    {
+      GLchar log[1024];
+
+      glGetProgramInfoLog (shader_program, sizeof (log) - 1, NULL, log);
+      log[sizeof (log) - 1] = '\0';
+      g_warning ("Link failed: %s", log);
+      return;
+    }
+
+  GLBAS (gles3, glUseProgram, (shader_program));
+
+  position_attrib = glGetAttribLocation (shader_program, "position");
+  GLBAS (gles3, glEnableVertexAttribArray, (position_attrib));
+  GLBAS (gles3, glVertexAttribPointer,
+    (position_attrib, 2, GL_FLOAT, GL_FALSE, 4 * sizeof (GLfloat), box));
+
+  texcoord_attrib = glGetAttribLocation (shader_program, "texcoord");
+  GLBAS (gles3, glEnableVertexAttribArray, (texcoord_attrib));
+  GLBAS (gles3, glVertexAttribPointer,
+    (texcoord_attrib, 2, GL_FLOAT, GL_FALSE, 4 * sizeof (GLfloat), box + 2));
+}
+
 static void
 paint_egl_image (MetaGles3   *gles3,
                  EGLImageKHR  egl_image,
@@ -50,41 +165,33 @@ paint_egl_image (MetaGles3   *gles3,
                  int          height)
 {
   GLuint texture;
-  GLuint framebuffer;
 
   meta_gles3_clear_error (gles3);
+  ensure_shader_program (gles3);
 
   GLBAS (gles3, glViewport, (0, 0, width, height));
 
-  GLBAS (gles3, glGenFramebuffers, (1, &framebuffer));
-  GLBAS (gles3, glBindFramebuffer, (GL_READ_FRAMEBUFFER, framebuffer));
-
   GLBAS (gles3, glActiveTexture, (GL_TEXTURE0));
   GLBAS (gles3, glGenTextures, (1, &texture));
-  GLBAS (gles3, glBindTexture, (GL_TEXTURE_2D, texture));
-  GLEXT (gles3, glEGLImageTargetTexture2DOES, (GL_TEXTURE_2D, egl_image));
-  GLBAS (gles3, glTexParameteri, (GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER,
+  GLBAS (gles3, glBindTexture, (GL_TEXTURE_EXTERNAL_OES, texture));
+  GLEXT (gles3, glEGLImageTargetTexture2DOES, (GL_TEXTURE_EXTERNAL_OES,
+                                               egl_image));
+  GLBAS (gles3, glTexParameteri, (GL_TEXTURE_EXTERNAL_OES,
+                                  GL_TEXTURE_MAG_FILTER,
                                   GL_NEAREST));
-  GLBAS (gles3, glTexParameteri, (GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER,
+  GLBAS (gles3, glTexParameteri, (GL_TEXTURE_EXTERNAL_OES,
+                                  GL_TEXTURE_MIN_FILTER,
                                   GL_NEAREST));
-  GLBAS (gles3, glTexParameteri, (GL_TEXTURE_2D, GL_TEXTURE_WRAP_S,
-                                  GL_CLAMP_TO_EDGE));
-  GLBAS (gles3, glTexParameteri, (GL_TEXTURE_2D, GL_TEXTURE_WRAP_T,
+  GLBAS (gles3, glTexParameteri, (GL_TEXTURE_EXTERNAL_OES,
+                                  GL_TEXTURE_WRAP_S,
                                   GL_CLAMP_TO_EDGE));
-  GLBAS (gles3, glTexParameteri, (GL_TEXTURE_2D, GL_TEXTURE_WRAP_R_OES,
+  GLBAS (gles3, glTexParameteri, (GL_TEXTURE_EXTERNAL_OES,
+                                  GL_TEXTURE_WRAP_T,
                                   GL_CLAMP_TO_EDGE));
 
-  GLBAS (gles3, glFramebufferTexture2D, (GL_READ_FRAMEBUFFER, GL_COLOR_ATTACHMENT0,
-                                         GL_TEXTURE_2D, texture, 0));
-
-  GLBAS (gles3, glBindFramebuffer, (GL_READ_FRAMEBUFFER, framebuffer));
-  GLBAS (gles3, glBlitFramebuffer, (0, height, width, 0,
-                                    0, 0, width, height,
-                                    GL_COLOR_BUFFER_BIT,
-                                    GL_NEAREST));
+  GLBAS (gles3, glDrawArrays, (GL_TRIANGLE_FAN, 0, 4));
 
   GLBAS (gles3, glDeleteTextures, (1, &texture));
-  GLBAS (gles3, glDeleteFramebuffers, (1, &framebuffer));
 }
 
 gboolean
-- 
GitLab

