From 37861d5f4f8f1a395845e505014117590386954f Mon Sep 17 00:00:00 2001
From: GloriousEggroll <gloriouseggroll@gmail.com>
Date: Thu, 6 Jun 2024 16:25:54 -0600
Subject: [PATCH] Respect repository priority ordering when displaying
 available package updates

---
 yumex/backend/dnf/dnf4.py | 58 +++++++++++++++++++++++++++++++++++++--
 yumex/backend/dnf/dnf5.py | 58 ++++++++++++++++++++++++++++++++++++++-
 2 files changed, 113 insertions(+), 3 deletions(-)

diff --git a/yumex/backend/dnf/dnf4.py b/yumex/backend/dnf/dnf4.py
index 5faceaa..2afc621 100644
--- a/yumex/backend/dnf/dnf4.py
+++ b/yumex/backend/dnf/dnf4.py
@@ -14,7 +14,7 @@
 # Copyright (C) 2024 Tim Lauridsen
 
 from time import time
-from typing import Iterable, Union
+from typing import Iterable, Union, List, Dict
 
 import dnf
 import dnf.yum
@@ -23,6 +23,7 @@ import dnf.conf
 import dnf.subject
 import hawkey
 import itertools
+import subprocess
 
 from yumex.utils import log
 from yumex.utils.enums import (
@@ -437,6 +438,59 @@ class Backend(DnfBase):
         self.reset(goal=True, repos=True, sack=True)
         self.setup_base()
 
+    def get_repo_priority(self, repo_name: str) -> int:
+        """Fetches the priority of a specified repository."""
+        result = subprocess.run(['dnf', 'config-manager', '--dump', repo_name], capture_output=True, text=True)
+        output_lines = result.stdout.split('\n')
+
+        for line in output_lines:
+            # Check if the line contains the priority setting
+            if 'priority =' in line:
+                # Extract the priority value
+                _, priority_str = line.split('=', 1)
+                try:
+                    priority_value = int(priority_str.strip())
+                    return priority_value
+                except ValueError:
+                    # Handle cases where the conversion to int fails
+                    print(f"Failed to convert priority '{priority_str}' to an integer.")
+                    return 99 # Default repo priority if not specified
+
+        # Return a default value if the repository name was not found or no priority was set
+        return 99
+
+    def get_package_repos(self, package_name: str) -> List[str]:
+        """Fetches the repositories providing a given package."""
+        result = subprocess.run(['dnf', 'provides', package_name], capture_output=True, text=True)
+        output_lines = result.stdout.split('\n')
+        repos = []
+        for line in output_lines:
+            if 'Repo' in line and '@' not in line:
+                repo = line.split(':')[1].strip()
+                repos.append(repo)
+        return sorted(set(repos))
+
+    def get_packages_with_lowest_priority(self, packages: List[YumexPackage]) -> List[YumexPackage]:
+        # Filter packages based on repository priority
+        filtered_packages = []
+        for pkg in packages:
+            repos = self.get_package_repos(pkg.name)
+
+            # Get the priority for each repository and store them in a list
+            repo_priorities = [self.get_repo_priority(repo) for repo in repos]
+
+            # Find the lowest priority among the repositories
+            lowest_priority = min(repo_priorities) if repo_priorities else float('99')
+
+            # Get the priority of the current package's repository
+            pkg_repo_priority = self.get_repo_priority(pkg.repo)
+
+            # Check if the priority of pkg.repo matches the lowest priority
+            if pkg_repo_priority == lowest_priority:
+                filtered_packages.append(pkg)
+
+        return filtered_packages
+
     def get_packages(self, pkg_filter: PackageFilter) -> list[YumexPackage]:
         match pkg_filter:
             case PackageFilter.AVAILABLE:
@@ -444,7 +498,7 @@ class Backend(DnfBase):
             case PackageFilter.INSTALLED:
                 return self.packages.installed
             case PackageFilter.UPDATES:
-                return self.packages.updates
+                return self.get_packages_with_lowest_priority(self.packages.updates)
             case other:
                 raise ValueError(f"{other} is not an legal package filter")
 
diff --git a/yumex/backend/dnf/dnf5.py b/yumex/backend/dnf/dnf5.py
index 0f12065..759ed80 100644
--- a/yumex/backend/dnf/dnf5.py
+++ b/yumex/backend/dnf/dnf5.py
@@ -13,9 +13,10 @@
 #
 # Copyright (C) 2024 Tim Lauridsen
 
-from typing import Iterable
+from typing import Iterable, List, Dict
 
 import libdnf5.base as dnf
+import subprocess
 from libdnf5.rpm import PackageQuery, Package  # noqa: F401
 from libdnf5.repo import RepoQuery, Repo  # noqa : F401
 from libdnf5.common import (
@@ -171,6 +172,59 @@ class Backend(dnf.Base):
         qa.update(qi)
         return self._get_yumex_packages(qa)
 
+    def get_repo_priority(self, repo_name: str) -> int:
+        """Fetches the priority of a specified repository."""
+        result = subprocess.run(['dnf', 'config-manager', '--dump', repo_name], capture_output=True, text=True)
+        output_lines = result.stdout.split('\n')
+
+        for line in output_lines:
+            # Check if the line contains the priority setting
+            if 'priority =' in line:
+                # Extract the priority value
+                _, priority_str = line.split('=', 1)
+                try:
+                    priority_value = int(priority_str.strip())
+                    return priority_value
+                except ValueError:
+                    # Handle cases where the conversion to int fails
+                    print(f"Failed to convert priority '{priority_str}' to an integer.")
+                    return 99 # Default repo priority if not specified
+
+        # Return a default value if the repository name was not found or no priority was set
+        return 99
+
+    def get_package_repos(self, package_name: str) -> List[str]:
+        """Fetches the repositories providing a given package."""
+        result = subprocess.run(['dnf', 'provides', package_name], capture_output=True, text=True)
+        output_lines = result.stdout.split('\n')
+        repos = []
+        for line in output_lines:
+            if 'Repo' in line and '@' not in line:
+                repo = line.split(':')[1].strip()
+                repos.append(repo)
+        return sorted(set(repos))
+
+    def get_packages_with_lowest_priority(self, packages: List[YumexPackage]) -> List[YumexPackage]:
+        # Filter packages based on repository priority
+        filtered_packages = []
+        for pkg in packages:
+            repos = self.get_package_repos(pkg.name)
+
+            # Get the priority for each repository and store them in a list
+            repo_priorities = [self.get_repo_priority(repo) for repo in repos]
+
+            # Find the lowest priority among the repositories
+            lowest_priority = min(repo_priorities) if repo_priorities else float('99')
+
+            # Get the priority of the current package's repository
+            pkg_repo_priority = self.get_repo_priority(pkg.repo)
+
+            # Check if the priority of pkg.repo matches the lowest priority
+            if pkg_repo_priority == lowest_priority:
+                filtered_packages.append(pkg)
+
+        return filtered_packages
+
     def get_packages(self, pkg_filter: PackageFilter) -> list[YumexPackage]:
         match pkg_filter:
             case PackageFilter.AVAILABLE:
@@ -179,6 +233,8 @@ class Backend(dnf.Base):
                 return self._get_yumex_packages(self.installed)
             case PackageFilter.UPDATES:
                 return self._get_yumex_packages(self.updates, state=PackageState.UPDATE)
+            case PackageFilter.UPDATES:
+                return self.get_packages_with_lowest_priority(self._get_yumex_packages(self.updates, state=PackageState.UPDATE))
             case other:
                 raise ValueError(f"Unknown package filter: {other}")
 
-- 
2.45.1

